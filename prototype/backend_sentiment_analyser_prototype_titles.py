# -*- coding: utf-8 -*-
"""backend_sentiment_analyser_prototype_titles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_i8Ed0GbCYFIlcLxny1vpHoaDHzKALGA
"""

from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk


def hello_world(request):
    """Responds to any HTTP request.
    Args:
        request (flask.Request): HTTP request object.
    Returns:
        The response text or any set of values that can be turned into a
        Response object using
        `make_response <http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response>`.
    """

    if request.method == 'OPTIONS':
    # Allows GET requests from any origin with the Content-Type
    # header and caches preflight response for an 3600s
      headers = {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET',
          'Access-Control-Allow-Headers': 'Content-Type',
          'Access-Control-Max-Age': '3600'
      }

      return ('', 204, headers)

    nltk.download('vader_lexicon')

    #get the sentence input
    sentence = request.args.get('sentence')

    #ensure it is in string format to handle errors
    sentence = str(sentence)

    #initiate sentiment model
    sid = SentimentIntensityAnalyzer()

    #compute output
    output = sid.polarity_scores(sentence)

    #return compound output
    output = output['compound']

            # Set CORS headers for the main request
    headers = {
        'Access-Control-Allow-Origin': '*'
    }

    #return results with headers to avoid CORS problems
    if output > 0:
        return ('positive', 200, headers)

    elif output < 0:
        return ('negative', 200, headers)
    
    else:
        return ('neutral', 200, headers)